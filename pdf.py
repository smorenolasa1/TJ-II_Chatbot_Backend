import streamlit as st
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, ListFlowable, ListItem
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_LEFT
from reportlab.lib import colors
import re

def load_summary():
    """Loads the structured summary generated by LLaMA from a file."""
    try:
        with open("generated_summary.txt", "r") as file:
            return file.read()
    except FileNotFoundError:
        print("❌ No summary file found. Make sure to complete the report first.")
        return None

# Function to detect sections and format them

def format_sections(report_text):
    """Formats structured text into properly styled sections."""
    sections = []
    lines = report_text.split("\n")
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        "TitleStyle",
        parent=styles["Heading1"],
        fontSize=14,
        textColor=colors.darkblue,
        spaceAfter=6,
        bold=True,
    )
    
    body_style = ParagraphStyle(
        "BodyStyle",
        parent=styles["Normal"],
        fontSize=12,
        leading=15,
    )
    
    for line in lines:
        if line.strip() == "":
            continue  # Skip empty lines
        
        line = re.sub(r"\*\*(.*?)\*\*", r"<b>\1</b>", line)  # Convert **text** to <b>text</b>
        sections.append(Paragraph(line, body_style))
        
        sections.append(Spacer(1, 6))  # Add spacing between sections
    
    return sections

def extract_bullets(text):
    """Extracts bullet points and formats them into a ListFlowable object."""
    bullet_pattern = r"(\d+\.\s.*|[-•]\s.*)"
    bullets = re.findall(bullet_pattern, text)

    bullet_list = []
    if bullets:
        for bullet in bullets:
            bullet_list.append(ListItem(Paragraph(bullet, getSampleStyleSheet()["Normal"])))

        text = re.sub(bullet_pattern, "", text)  # Remove extracted bullet points from text

    return text, bullet_list

def generate_pdf(report_text):
    """Creates a well-formatted PDF file from the structured report."""
    pdf_file = "Generated_Report.pdf"
    doc = SimpleDocTemplate(pdf_file, pagesize=letter)
    styles = getSampleStyleSheet()

    # Title Style
    title_style = styles["Title"]
    title_style.fontSize = 18
    title_style.textColor = colors.darkblue
    title_style.alignment = TA_LEFT

    # Process and format report sections
    formatted_sections = format_sections(report_text)
    
    # Extract bullet points separately
    formatted_text, bullet_points = extract_bullets(report_text)

    # Create PDF elements
    elements = [
        Paragraph("<b>Generated Report</b>", title_style),
        Spacer(1, 10)
    ]
    
    # Add formatted sections
    elements.extend(formatted_sections)
    
    # Add extracted bullet points
    if bullet_points:
        elements.append(ListFlowable(bullet_points, bulletType="bullet"))
    
    # Build PDF
    doc.build(elements)
    return pdf_file

if __name__ == "__main__":
    report_text = load_summary()

    if not report_text:
        print("❌ No structured summary found. Please complete the report first.")
        exit(1)  # Ensure subprocess detects failure

    try:
        pdf_path = generate_pdf(report_text)
        if pdf_path:
            print(f"✅ PDF Created: {pdf_path}")
            exit(0)  # Success
        else:
            print("❌ PDF generation failed.")
            exit(1)
    except Exception as e:
        print(f"❌ Unexpected error: {e}")
        exit(1)  # Ensure subprocess detects failure